Module BoxMultiply
  uses
    Pass
    And
    Add
    DK
  compose 2 x 2
    Add DK
    And Pass 

Module TwelveBoxMultiply
  uses
    BoxMultiply
  compose 4 x 3
    BoxMultiply BoxMultiply BoxMultiply BoxMultiply
    BoxMultiply BoxMultiply BoxMultiply BoxMultiply
    BoxMultiply BoxMultiply BoxMultiply BoxMultiply

Module Adjacent
  uses
    RightTurn
    And
    Pass
    DK
  compose 2 x 2
    RightTurn DK
    And       Pass

Module AdjacentGroup
  uses
    Adjacent
  compose 4 x 1
    Adjacent Adjacent Adjacent Adjacent

Module Adjacent2
  uses
    Pass
    LeftTurn
  compose 1 x 2
    LeftTurn
    Pass

Module Adjacent2Group
  uses
    Adjacent2
    DK
    Pass
  compose 1 x 5
    DK
    Pass
    Adjacent2
    Adjacent2
    Adjacent2

Module Multiply1
  uses
    TwelveBoxMultiply
    AdjacentGroup
  compose 1 x 2
    AdjacentGroup
    TwelveBoxMultiply

Module FullFourBitMultiply
  uses
    Multiply1
    Adjacent2Group
  compose 2 x 1
    Adjacent2Group Multiply1

Interface FullFourBitMultiply
  uses
    FullFourBitMultiply
  inputs
    A = 0 0 Left
    B = 0 0 Top
    C = 0 2 Top
    D = 0 4 Top
    E = 0 6 Top
    F = 1 8 Right
    G = 2 8 Right
    H = 3 8 Right
    I = 4 8 Right
    J = 5 8 Right
    K = 6 8 Right
    L = 7 8 Right
  outputs
    A = 0 1 Left
    B = 0 3 Left
    C = 0 5 Left
    D = 0 7 Left
    E = 0 7 Bottom
    F = 1 7 Bottom
    G = 2 7 Bottom
    H = 3 7 Bottom
    I = 4 7 Bottom
    J = 5 7 Bottom
    K = 6 7 Bottom
    L = 7 7 Bottom
    M = 8 7 Bottom
    N = 8 6 Right
    O = 8 4 Right
    P = 8 2 Right

Interface TwoNumberMultiply
  uses Interface FullFourBitMultiply FFBM
  inputs
    FFBM[A,B,C,D] = A
    FFBM[F,H,J,L] = B
    FFBM[rest] = on bit // or hook in from outside for joining with more multiplys
  outputs
    C = FFBM[?,?,?,?]  // jed can you figure the output bits for this


Syntax Operator *(A B)
  uses Interface TwoNumberMultiply TNM
  inputs
    TNM.A = A
    TNM.B = B
  outputs
    return TNM.C;

Syntax Operator ()(OP A B)
  outputs
    return Syntax Operator OP(A B);

Syntax Infix(A OP B)
  outputs
    return Syntax Operator ()(OP A B);

Module ThreeNumberMultiply(A B C)
  use Syntax Infix (D1 * D2)
  inputs
    A = limit 4 bits like D1
    B = limit 4 bits like D2
    C = limit 4 bits like D2
  outputs
    return ((A * B) * C)

Program
  echo ThreeNumberMultiply(0010 0010 0010)
